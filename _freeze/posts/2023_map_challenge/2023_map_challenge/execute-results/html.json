{
  "hash": "b245b11cca779773a5b53c4130cec1f5",
  "result": {
    "markdown": "---\ntitle: \"30 Day Map Challenge\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-11-05\"\nformat: \n  html:\n    toc: true\n---\n\n\n## Introduction\n\nEven though I have done the [30 Day Map Challenge](https://30daymapchallenge.com/) each of the past two years, since data visualization is just a hobby for me, I feel like I start from scratch each time.  This year, I decided to lean into that feeling and treat the month as production of a long blog post that likewise nearly starts from scratch.\n\n![](30dmc-2023.png)\n\nI am interested in learning about the state of New Jersey, and we will perhaps get data from sites such as\n\n* [NJDEP Bureau of GIS](https://www.nj.gov/dep/gis/) and its [ArcGIS repository](https://gisdata-njdep.opendata.arcgis.com/) \n* [NJGIN Open Data](https://njogis-newjersey.opendata.arcgis.com/)\n\nMost of my work here will be performed with the `ggplot2` and `sf` (\"special features\") packages in the `R` programmer universe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"ggtext\")\nlibrary(\"sf\")\n```\n:::\n\n\n\n# Day 1: Points\n\nInitially, my searches for \"New Jersey cities shapefile\" and \"New Jersey colleges shapefile\" actually retrived polygons, so I am already taking liberties about what 'points' will mean here.  I still intend on starting simple and working outward.\n\nFirst, we load the shapefile.  This data comes from the NJGIN ([source](https://njogis-newjersey.opendata.arcgis.com/datasets/60070a28b95248e9a1f3398d37b91775/explore))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_colleges <- sf::st_read(\"data/Colleges_and_Universities_in_NJ/Colleges_and_Universities_in_NJ.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Colleges_and_Universities_in_NJ' from data source \n  `C:\\Users\\freex\\Documents\\GitHub\\quartoblog\\posts\\2023_map_challenge\\data\\Colleges_and_Universities_in_NJ\\Colleges_and_Universities_in_NJ.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 78 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 218539.1 ymin: 97707.92 xmax: 631389.8 ymax: 822455.9\nProjected CRS: NAD83 / New Jersey (ftUS)\n```\n:::\n:::\n\n\nNow, we can make an initial map using `ggplot2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make rough map\nnj_colleges |>\n  ggplot() +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Graph Labels\n\nFor now, I should get in the habit of labeling my graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_colleges |>\n  ggplot() +\n  geom_sf() +\n  labs(title = \"Colleges of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 1: Points\",\n       caption = \"Data source: NJGIN\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nOf course, this product lacks meaning without context, but that gives us something to look forward to in future days!\n\n\n# Day 2: Lines\n\nEach 30 Day Map Challenge probably started with the same first 3 themes to emphasize one of the main ways to classify spatial data: points, lines, and polygons.  Those notions affect how the data is stored in shapefiles.\n\nToday, in the theme of building maps about New Jersey, let us simply plot the state itself.  Once again, I will intentionally miss the academic meaning of the theme (\"lines\"); the data is of polygon type, but I am thinking of the state border as one line.  This data comes from the NJGIN ([source](https://njogis-newjersey.opendata.arcgis.com/datasets/state-boundary-of-nj/explore))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_state_shp <- sf::st_read(\"data/State_Boundary_of_NJ/State_Boundary_of_NJ.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `State_Boundary_of_NJ' from data source \n  `C:\\Users\\freex\\Documents\\GitHub\\quartoblog\\posts\\2023_map_challenge\\data\\State_Boundary_of_NJ\\State_Boundary_of_NJ.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 191987.2 ymin: 7591.33 xmax: 659494.9 ymax: 919556.3\nProjected CRS: NAD83 / New Jersey (ftUS)\n```\n:::\n:::\n\n\nWe can continue to adapt code and apply yesterday's code to today's shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_state_shp |> #changed the data set\n  ggplot() +\n  geom_sf() +\n  labs(title = \"The State of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 2: Lines\",\n       caption = \"Data source: NJGIN\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Aesthetic Customization\n\nEach day, I may challenge myself to add to the complexity.  For now, let us emphasize the \"line\" in the picture by customizing the color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_state_shp |>\n  ggplot() +\n  geom_sf(color = \"blue\", linewidth = 3) + #updated attributes\n  labs(title = \"The State of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 2: Lines\",\n       caption = \"Data source: NJGIN\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Day 3: Polygons\n\nWell, after actually using 'polygon' data in the previous two days, finally being advised to use polygons should be simple here.  For mentally planning ideas for map making, one can think \"regions\" when dealing with polygon data. This data comes from the NJGIN ([source](https://njogis-newjersey.opendata.arcgis.com/datasets/newjersey::county-boundaries-of-nj/explore))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_counties <- sf::st_read(\"data/County_Boundaries_of_NJ/County_Boundaries_of_NJ.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `County_Boundaries_of_NJ' from data source \n  `C:\\Users\\freex\\Documents\\GitHub\\quartoblog\\posts\\2023_map_challenge\\data\\County_Boundaries_of_NJ\\County_Boundaries_of_NJ.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 21 features and 24 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 193684.7 ymin: 34945.75 xmax: 657059.7 ymax: 919556.3\nProjected CRS: NAD83 / New Jersey (ftUS)\n```\n:::\n:::\n\n\nNotice that the `geom_sf` layer function works in the `ggplot` framework and will handle the polygon data well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_counties |>\n  ggplot() +\n  geom_sf() +\n  labs(title = \"The Counties of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 3: Polygons\",\n       caption = \"Data source: NJGIN\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Aesthetic Mapping\n\nOne of the joys of programming in R is the ease of color-coding by a categorical label.  Here, we can create a rather impressive map by letting the software choose various colors for the counties.\n\nFirst, we should get a sense of the variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(nj_counties)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"OBJECTID\"   \"GLOBALID\"   \"COUNTY\"     \"COUNTY_LAB\" \"CO\"        \n [6] \"GNIS_NAME\"  \"GNIS\"       \"FIPSSTCO\"   \"FIPSCO\"     \"ACRES\"     \n[11] \"SQ_MILES\"   \"POP2020\"    \"POP2010\"    \"POP2000\"    \"POP1990\"   \n[16] \"POP1980\"    \"POPDEN2020\" \"POPDEN2010\" \"POPDEN2000\" \"POPDEN1990\"\n[21] \"POPDEN1980\" \"REGION\"     \"Shape_Leng\" \"Shape_Area\" \"geometry\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_counties |>\n  ggplot() +\n  geom_sf(aes(fill = COUNTY)) +\n  labs(title = \"The Counties of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 3: Polygons\",\n       caption = \"Data source: NJGIN\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n# Day 4: A Bad Map\n\nIf you're following along, you might have wondered why I didn't label the counties in the previous map.  Here, for \"Day 4: A Bad Map\", let me show you.\n\n## Centroids\n\nThe way that `geom_text` or `geom_label` work inside `ggplot` is that you need to indicate the aesthetics of locations (i.e. x and y coordinates) and labels.  That is, while polygons are many points of data, we need to compute one point per polygon to tell the software where to put the labels.  One way to compute those locations is to compute the centroids (and, long story short, there are several ways to compute centroids).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the centroid of each hexagon to add the label\n# https://stackoverflow.com/questions/49343958/do-the-values-returned-by-rgeosgcentroid-and-sfst-centroid-differ\ncenters <- data.frame(\n  st_coordinates(st_centroid(nj_counties$geometry)),\n  id=nj_counties$COUNTY)\n\nnj_counties <- nj_counties |>\n  left_join(centers, by = c(\"COUNTY\" = \"id\"))\n```\n:::\n\n\nNow, the data frame has convenient \"X\" and \"Y\" coordinates (which happen to be capital letters in these default codes).\n\n## Aesthetic Labeling\n\nNow let us see how `geom_label` works with our map so far.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_counties |>\n  ggplot() +\n  geom_sf(aes(fill = COUNTY)) +\n  geom_label(aes(x = X, y = Y, label = COUNTY)) +\n  labs(title = \"The Counties of New Jersey\",\n       subtitle = \"30 Day Map Challenge, Day 4: A Bad Map\",\n       caption = \"Data source: NJGIN\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThere are certainly ways to improve the readability and beauty of this map, and we might explore those ways in future days.\n\n\n# Day 5: Analog Map\n\nThe intent of the 'Analog Map' theme is to encourage us map making nerds to draw a map \"in real life\" (or, \"in meat space\"). However, there is an idea that has been on my mind, so I want to try to overlap shapefiles of New Jersey and California---that is, closer to the word \"analogy\".\n\nToday's shapefile for the state of California comes from the [California Open Data Portal](https://data.ca.gov/dataset/ca-geographic-boundaries/resource/3db1e426-fb51-44f5-82d5-a54d7c6e188b).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_state_shp <- sf::st_read(\"data/ca-state-boundary/CA_State_TIGER2016.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CA_State_TIGER2016' from data source \n  `C:\\Users\\freex\\Documents\\GitHub\\quartoblog\\posts\\2023_map_challenge\\data\\ca-state-boundary\\CA_State_TIGER2016.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -13857270 ymin: 3832931 xmax: -12705030 ymax: 5162404\nProjected CRS: WGS 84 / Pseudo-Mercator\n```\n:::\n:::\n\n\n## Coordinate Reference Systems\n\nLong story short, each map of the 3D Earth is projected onto a 2D plane, but there are ways to perform that projection (with goals such as maintaining areas or shapes as well as possible).  For our purposes, the work here will be easier if both of the California and New Jersey shapefiles use the same projection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check CRS\nst_crs(ca_state_shp)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"WGS 84 / Pseudo-Mercator\"\n```\n:::\n\n```{.r .cell-code}\nst_crs(nj_state_shp)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"NAD83 / New Jersey (ftUS)\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nca_state_shp <- st_transform(ca_state_shp, st_crs(nj_state_shp))\n```\n:::\n\n\n\nWe can observe that the projection systems are not the same. Hopefully, the simplest fix is to simply re-project the CRS of the California shapefile into the CRS of the New Jersey shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set CRS\n# st_crs(ca_state_shp) <- st_crs(nj_state_shp)\n\n# verify\nst_crs(ca_state_shp)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$input\n[1] \"NAD83 / New Jersey (ftUS)\"\n```\n:::\n:::\n\n\nSo far, here is the juxtaposition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnj_state_shp |>\n  ggplot() +\n  geom_sf() +\n  geom_sf(data = ca_state_shp)\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Coordinates\n\nFor some of the math I intend on carrying out, I will need to manipulate the latitude and/or longitude values (i.e. the x and y coordinates). We can extract coordinates using the `st_geometry` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_sfc <- st_geometry(ca_state_shp) #extracts geom column\nnj_sfc <- st_geometry(nj_state_shp) #extracts geom column\n```\n:::\n\n\nNext, I want the median longitude value for each shapefile.  I am going to brute force my way through the list data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ca_long_median_x <- median(ca_sfc[[1]][[7]][[1]][,1])\n# nj_long_median_x <- median(nj_sfc[[1]][[1]][,1])\n# median_difference_x <- nj_long_median_x - ca_long_median_x\n# \n# ca_long_median_y <- median(ca_sfc[[1]][[7]][[1]][,2])\n# nj_long_median_y <- median(nj_sfc[[1]][[1]][,2])\n# median_difference_y <- nj_long_median_y - ca_long_median_y\n```\n:::\n\n\nMaybe centroids will work better?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_centroid <- st_coordinates(st_centroid(ca_state_shp$geometry))\nnj_centroid <- st_coordinates(st_centroid(nj_state_shp$geometry))\nlong_diff <- nj_centroid[1] - ca_centroid[1]\nlat_diff <- nj_centroid[2] - ca_centroid[2]\n```\n:::\n\n\n\n## Translation\n\nNow, I want to translate the Calfornia shape over to the New Jersey shape.  Some social media posts were clever by aligning San Francisco with New York City, but my interest came from maintaining latitude values (which might help me understand weather and climate), so that will take place with the zero in `c(median_difference, 0)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ca_shifted_sfc <- ca_sfc + c(median_difference_x, 0)\n# ca_shifted_shp <- st_set_geometry(ca_state_shp, ca_shifted_sfc)\n# st_crs(ca_shifted_shp) <- st_crs(nj_state_shp) #ensure same CRS\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# using the centroids instead\nca_shifted_sfc <- ca_sfc + c(long_diff, lat_diff)\nca_shifted_shp <- st_set_geometry(ca_state_shp, ca_shifted_sfc)\nst_crs(ca_shifted_shp) <- st_crs(nj_state_shp) #ensure same CRS\n```\n:::\n\n\nSo far, here is the juxtaposition. I decided to place the New Jersey layer on top of the Calfornia layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca_shifted_shp |>\n  ggplot() +\n  geom_sf() +\n  geom_sf(data = nj_state_shp)\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Markdown Titles\n\nWith just two objects in one map, one neat way of labeling the objects is to change the text colors in the title using the `ggtext` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_string <- \"<span style='color:brown'><b>California</b></span> and <span style='color:blue'><b>New Jersey</b></span>\"\n\nca_shifted_shp |>\n  ggplot() +\n  geom_sf(color = \"brown\", fill = \"brown\") +\n  geom_sf(data = nj_state_shp, color = \"blue\", fill = \"blue\") +\n  labs(title = title_string,\n       subtitle = \"30 Day Map Challenge\\nDay 5: Analog Map\",\n       caption = \"Data sources: NJGIN\\nand CA Open Data Portal\") +\n  theme(plot.title = element_markdown()) #need ggtext here\n```\n\n::: {.cell-output-display}\n![](2023_map_challenge_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "2023_map_challenge_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}