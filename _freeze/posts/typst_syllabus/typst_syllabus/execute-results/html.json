{
  "hash": "5b1940eb3c017d48734b7b2b4c353bcb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Typst Syllabus\"\nauthor: \"Derek Sollberger\"\ndate: \"2025-08-29\"\nformat:\n  html\n---\n\n\n\n# Inspiration\n\nEver since Carlos Scheidegger's talk at `posit::conf(2023)`, I have wanted to try to use `Typst` to create a course syllabus. Over the past day, I have been aided by YouTube videos and the documentation on the Typst website to guide me into creating a fairly creative deliverable.  In this blog post, I wanted to elaborate on some design decision and jot down some Typst code just in case I try to teach these materials in the future.\n\n# Splash\n\nI should mention that for the past year, I have simply made straightforward syllabi in LaTex (via Overleaf).  I later learned that my university has a welcoming culture that encourages creativity in teaching. For the first page, I realized that I didn't need the official labels (course description, course learning outcomes) to appear immediately, so I relegated those to page two.  Instead, I found libraries in the `Typst Universe` that allowed me to make diagrams---with the markup language!\n\n* `treet`: make file organization trees\n* `fletcher`: one (of several) libraries that make flow charts.  I chose this one since the syntax was similar to `Mermaid`\n\nI start out the syllabus with an orange `#block`, and containers in Typst still allow for markdown such as level-one headers.  I proceed with more headers.  Like Quarto markdown, syntax are treated as void tags (instead of needing to worry about opening and closing environments).\n\nWhile Typst allows for creation of `columns`, the column settings tend to be too powerful as they pertain to all pages.  One could make exceptions here and there.\n\nInstead, like the documentation implied, I quickly preferred to use the `#grid` function for the **layout**.\n\n::::: {.panel-tabset}\n\n## Main\n\n## Tree\n\n```\n#text(black, tree-list(\n  marker: text(rgb(\"f58025\"))[├── ],\n  last-marker: text(rgb(\"f58025\"))[└── ],\n  indent: text(rgb(\"f58025\"))[│#h(1.5em)],\n  empty-indent: h(2em),\n)[\n  - Machine Learning\n    - Supervised Learning\n      - Regression\n        - Penalization\n      - Classification\n        - Decision Trees\n        - Random Forests\n          - Boosting\n        - SVMs\n          - Kernels\n    - Unsupervised Learning\n      - Clustering\n      - KNN\n  - Neural Networks\n    - Perceptrons\n    - Backpropagtion\n    - Image Processing\n    \n  - Large Language Models\n    - Text Tokenization\n    - Prompt Engineering\n    - Developer Tools\n]\n```\n\n\n## Network\n\n```\n#diagram(\n\tnode-stroke: .1em,\n\tnode-fill: gradient.radial(rgb(\"f58025\").lighten(80%), rgb(\"f58025\"), center: (30%, 20%), radius: 60%),\n\tspacing: 4em,\n\n node((0.5,1), \"S\", radius: 1.5em),\n node((1.5,1), \"M\", radius: 1.5em),\n node((2.5,1), \"L\", radius: 1.5em),\n \n node((0.5,2), \"3\", radius: 1.5em),\n node((1.5,2), \"0\", radius: 1.5em),\n node((2.5,2), \"1\", radius: 1.5em),\n \n node((0,3), \"F\", radius: 1em),\n node((1,3), \"A\", radius: 1em),\n node((2,3), \"L\", radius: 1em),\n node((3,3), \"L\", radius: 1em),\n \n\tnode((0,4), \"2\", radius: 1em),\n node((1,4), \"0\", radius: 1em),\n node((2,4), \"2\", radius: 1em),\n node((3,4), \"5\", radius: 1em),\n\n edge((0.5,1), (0.5, 2), \"-|>\"),\n edge((0.5,1), (1.5, 2), \"-|>\"),\n edge((0.5,1), (2.5, 2), \"-|>\"),\n edge((1.5,1), (0.5, 2), \"-|>\"),\n edge((1.5,1), (1.5, 2), \"-|>\"),\n edge((1.5,1), (2.5, 2), \"-|>\"),\n edge((2.5,1), (0.5, 2), \"-|>\"),\n edge((2.5,1), (1.5, 2), \"-|>\"),\n edge((2.5,1), (2.5, 2), \"-|>\"),\n\n edge((0.5,2), (0, 3), \"-|>\"),\n edge((0.5,2), (1, 3), \"-|>\"),\n edge((0.5,2), (2, 3), \"-|>\"),\n edge((0.5,2), (3, 3), \"-|>\"),\n edge((1.5,2), (0, 3), \"-|>\"),\n edge((1.5,2), (1, 3), \"-|>\"),\n edge((1.5,2), (2, 3), \"-|>\"),\n edge((1.5,2), (3, 3), \"-|>\"),\n edge((2.5,2), (0, 3), \"-|>\"),\n edge((2.5,2), (1, 3), \"-|>\"),\n edge((2.5,2), (2, 3), \"-|>\"),\n edge((2.5,2), (3, 3), \"-|>\"),\n\n edge((0,3), (0, 4), \"-|>\"),\n edge((0,3), (1, 4), \"-|>\"),\n edge((0,3), (2, 4), \"-|>\"),\n edge((0,3), (3, 4), \"-|>\"),\n edge((1,3), (0, 4), \"-|>\"),\n edge((1,3), (1, 4), \"-|>\"),\n edge((1,3), (2, 4), \"-|>\"),\n edge((1,3), (3, 4), \"-|>\"),\n edge((2,3), (0, 4), \"-|>\"),\n edge((2,3), (1, 4), \"-|>\"),\n edge((2,3), (2, 4), \"-|>\"),\n edge((2,3), (3, 4), \"-|>\"),\n edge((3,3), (0, 4), \"-|>\"),\n edge((3,3), (1, 4), \"-|>\"),\n edge((3,3), (2, 4), \"-|>\"),\n edge((3,3), (3, 4), \"-|>\"),\n)\n```\n\n\n:::::\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n#import \"@preview/fletcher:0.5.8\" as fletcher: diagram, node, edge\n#import \"@preview/showybox:2.0.4\": showybox\n#import \"@preview/treet:1.0.0\": *\n\n#set page(\"us-letter\") //thanks Europeans!\n#set text(\n  font: \"New Computer Modern\",\n  size: 14pt\n)\n\n#set align(center)\n#block(\n  fill: rgb(\"f58025\"),\n  inset: 14pt,\n  width: 100%,\n  [= SML 301: Data Intelligence\n= Modern Data Science Methods]\n)\n\n== Instructor: Derek Sollberger\n=== (teacher email)\n\n#set align(center)\n\n\n#grid(\n  columns: (1fr, 1fr),\n  [== Post-Docs:\n\n- person name (person email)\n- person name (person email)],\n  [== Teaching Assistants:\n\n- person name (person email)\n- person name (person email)\n- person name (person email)\n], [], [],\n)\n\n#set align(left+horizon)\n#set text(\n  font: \"New Computer Modern\",\n  size: 12pt\n)\n\n#grid(\n  columns: (1fr, 1fr),\n  [\n#text(black, tree-list(\n  marker: text(rgb(\"f58025\"))[├── ],\n  last-marker: text(rgb(\"f58025\"))[└── ],\n  indent: text(rgb(\"f58025\"))[│#h(1.5em)],\n  empty-indent: h(2em),\n)[...])\n    \n  ],\n  [\n#diagram(...)    \n  ]\n)\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![splash page](1.png)\n:::\n\n::::\n\n\n# Page 2\n\nNow, we get to a page with a lot of text.  I deploy a `#grid` to create two columns.\n\n* `columns: (1fr, 4fr)` computes that 20% of the width is allocated for the first column, and the remaining 80% is allocated for the second column\n* `align: horizon` aligns the content of the grid boxes with the vertical midpoint.\n\nI also increase the font size to fill out space right up to before when an additional page would have been necessary.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n#pagebreak()\n// Course Description and CLOs\n#set align(left)\n#set text(\n  font: \"New Computer Modern\",\n  size: 14pt\n)\n\n#grid(\n  align: horizon,\n  columns: (1fr, 4fr),\n  fill: (rgb(\"f58025\"), none),\n  gutter: 12pt,\n  [],\n  [== Course Description\n  ...\n  \n  == Course Learning Outcomes\n...\n\n=== Prerequisites\n...\n]\n)\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![page two](2.png)\n:::\n\n::::\n\n\n# Mosaic\n\nFor the course reading list, I wanted to show off and combine images of some of the several books that I have read in the past couple of years. I start out by making a `#grid` with 6 rows and 5 columns (i.e. 4x3 matrix of images, and then some padding). The `square()` function literally draws a square, and I used that to draft the layout.  Then, the `image()` function loads the images (where I have placed the images in an \"image\" subdirectory out of habit). Finally, I type out the book titles and authors in the padding for accessibility purposes. It is nice that text is automatically wrapped within grid cells.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n== Reading List\n// Grid of Suggested Books\n#set text(\n  font: \"New Computer Modern\",\n  size: 10pt\n)\n\n#grid(\n  align: center+horizon,\n  columns: (1fr, 1fr, 1fr, 1fr, 1fr),\n  rows: (1fr, 1fr, 1fr, 1fr, 1fr, 1fr),\n  square(fill: rgb(\"f58025\")),\n  [_Deep Learning Illustrated_ \\ Jon Krohn et al],\n  [_ISLP_ \\ James, Witten, Hastie, Tibshirani, Taylor],\n  [_ML Cookbook_ \\ Gallatin, Albon],\n  square(fill: rgb(\"f58025\")),\n  square(fill: rgb(\"f58025\")),\n  image(\"images/Deep_Learning_Illustrated.png\"),\n  image(\"images/ISLP.png\"),\n  image(\"images/Machine_Learning_Cookbook.png\"),\n  square(fill: rgb(\"f58025\")),\n  [_DL with Python_ \\ Francois Chollet],\n  image(\"images/Deep_Learning_with_Python.png\"),\n  image(\"images/Hands_On_LLMs.png\"),\n  image(\"images/Statquest_Neural_Networks.png\"),\n  [_StatQuest AI_ \\ Josh Starmer],\n  [_Probabilistic ML_ \\ Kevin P Murphy],\n  image(\"images/PML.png\"),\n  image(\"images/Programmers_Brain.png\"),\n  image(\"images/Why_Machines_Learn.png\"),\n  [_Why Machines Learn_ \\ Anil Ananthaswamy],\n  [_Co-Intelligence_ \\ Ethan Mollick],\n  image(\"images/Co_Intelligence.png\"),\n  image(\"images/How_Data_Happened.png\"),\n  image(\"images/Weapons_of_Math_Destruction.png\"),\n  [_Weapons of Math Destruction_ \\ Cathy O'Neil],\n  square(fill: rgb(\"f58025\")),\n  [_Hands-On LLMs_ \\ Allammar, Grootendorst],\n  [_How Data Happened_ \\ Wiggins, Jones],\n  [_Programmer's Brain_ \\ Felienne Hermans],\n  square(fill: rgb(\"f58025\")),\n)\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![mosaic](3.png)\n:::\n\n::::\n\n\n# Table\n\nWhat finally sold me on Typst was the notion that I would not need \"yet another markdown language\" for making tables.  In fact, Typst is more than a markup language.  Here, we literally `#let` a data file exist as an object in a variable name, and then print the variable with a `for` loop.\n\nFor further appeal, if need be, the tables\n\n* can be rotated (say, to landscape mode)\n* can be set to automatically split themselves across pages `#show figure: set block(breakable: true)`\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n== Lecture Schedule\n// Table of Lecture Sessions (one column)\n\n#set text(\n  font: \"New Computer Modern\",\n  size: 10pt\n)\n\n//load schedule data\n#let lecture_schedule = csv(\"SML_301_Fall_2025_lecture_schedule.csv\", row-type: array).slice(2)\n\n//header row bold\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n//allow table to be split across pages!\n#show figure: set block(breakable: true)\n\n//main table code\n#table(\n  align: center,\n  columns: 7,\n  table.header[Week][Date][Topic][Python][Matplotlib][Precept][Projects],\n  ..for(.., Week, Date, Topic, Python, Matplotlib, Precept, Projects) in lecture_schedule{\n    (Week, Date, Topic, Python, Matplotlib, Precept, Projects)\n  },\n  fill: (none, none, rgb(\"f58025\"), none, none, none, rgb(\"f58025\")),\n)\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![table](4.png)\n:::\n\n::::\n\n\n# Page 5\n\nYou may have noticed that I reduced the font size for materials that are of less importance to the reader.  That is, there are some sections that I do not need students to read right away, but at the same time I want to assure them that these matters are available in the syllabus.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n#set text(\n  font: \"New Computer Modern\",\n  size: 10pt\n)\n\n#grid(\n  align: horizon,\n  columns: (1fr, 4fr),\n  fill: (rgb(\"f58025\"), none),\n  gutter: 12pt,\n  [],\n  [= Class Policies\n- Lecture sections: ...\n- Precepts ...\n- Late policy: ...\n- Computers: ...\n- Special Accommodations:  ...\n- Academic Integrity: ...\n],\n)\n\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![policies](5.png)\n:::\n\n::::\n\n# Take Home\n\nIn contrast, there are some unique materials in my syllabi.  In Quarto, I love using `callout` boxes (as they remind me of textbooks from when I was a student).  Here in the Typst Universe, the `showybox` library is the analogue.  I quickly adapt its syntax while also being mindful of colors and readability.\n\nAlso, `footnote()` is still as convenient as its LaTeX counterpart.\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n```\n#showybox(...)\n\n#showybox(...)\n\n#showybox(\n  frame: (\n    //border-color: red.darken(50%),\n    title-color: rgb(\"f58025\"),\n    body-color: rgb(\"f58025\")\n  ),\n  title-style: (\n    color: black,\n    weight: \"bold\",\n    align: center\n  ),\n  shadow: (\n    offset: 5pt,\n  ),\n  title: \"Typst\",\n  [This syllabus document was created with Typst!\n  https://typst.app\n  ], \n)\n```\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n![take home](6.png)\n:::\n\n::::\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.1 (2025-06-13 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.5.1    fastmap_1.2.0     cli_3.6.5        \n [5] tools_4.5.1       htmltools_0.5.8.1 rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.50        jsonlite_2.0.0    xfun_0.52        \n[13] digest_0.6.37     rlang_1.1.6       evaluate_1.0.4   \n```\n\n\n:::\n:::\n\n\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}