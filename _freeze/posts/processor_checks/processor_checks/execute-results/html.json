{
  "hash": "48044621a9a9234e04b70904de82629b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Processor Checks\"\nauthor: \"Derek Sollberger\"\ndate: \"2025-06-22\"\nformat:\n  html\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Setting the Scene\n\nFor my machine learning class (with AI topics), I should survey the students to get a sense of how powerful their computers are.  In particular, I want to ask them\n\n* How many CPUs does your computer have?\n* Does your computer processing have accessing to GPUs?\n\nFor my own skills, I want to provide the code for these tasks in both `R` and `Python`.\n\n# R\n\n## How many CPUs does your computer have?\n\nIn `R`, we can use the `detectCores()` function from the `parallel` package for this task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(paste0(\"The number of cores on my computer is: \",\n             parallel::detectCores()))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The number of cores on my computer is: 16\"\n```\n\n\n:::\n:::\n\n\n\nAside, upon looking up this function, I came across this neat [blog post](https://www.jottr.org/2022/12/05/avoid-detectcores/) that advises developers to avoid using `detectCores()` (i.e. don't use *all* of the users' CPUs).\n\n## Does your computer processing have accessing to GPUs?\n\nI have been moving to teaching in `PyTorch`, so I am familiar with `torch` packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"torch\")\n```\n:::\n\n\n\nAt the time of this writing, my CUDA version was higher than what the R `torch` package was compatibile with.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if CUDA is available\ncuda_available = torch.cuda.is_available()\n\n# Print the result\nprint(paste(\"CUDA available:\", cuda_available))\n\n# If CUDA is available, you can also print the number of GPUs\nif (cuda_available) {\n  print(paste(\"Number of GPUs available:\", torch.cuda.device_count()))\n  print(paste(\"GPU Name:\", torch.cuda.get_device_name(0))) # Assuming at least one GPU\n} else {\n  print(\"CUDA is not available on this system.\")\n}\n```\n:::\n\n\n\n\n# Python\n\n## How many CPUs does your computer have?\n\nWe can use the `cpu_count()` function from the `multiprocessing` library.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport multiprocessing\nprint(multiprocessing.cpu_count())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n16\n```\n\n\n:::\n:::\n\n\n\n## Does your computer processing have accessing to GPUs?\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport torch\n\nif torch.cuda.is_available():\n  print(\"GPU is available.\")\nelse:\n  print(\"GPU is not available.\")\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.0 (2025-04-11 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.37     fastmap_1.2.0     xfun_0.52         Matrix_1.7-3     \n [5] lattice_0.22-6    reticulate_1.42.0 knitr_1.50        parallel_4.5.0   \n [9] htmltools_0.5.8.1 png_0.1-8         rmarkdown_2.29    cli_3.6.5        \n[13] grid_4.5.0        withr_3.0.2       compiler_4.5.0    rprojroot_2.0.4  \n[17] here_1.0.1        rstudioapi_0.17.1 tools_4.5.0       evaluate_1.0.3   \n[21] Rcpp_1.0.14       yaml_2.3.10       rlang_1.1.6       jsonlite_2.0.0   \n[25] htmlwidgets_1.6.4\n```\n\n\n:::\n:::\n\n\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}