{
  "hash": "6d94f654e1eba5d56eaad7c807de391b",
  "result": {
    "markdown": "---\ntitle: \"JupyterHub Showcase\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-03-06\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"palmerpenguins\")\nlibrary(\"tidyverse\")\n```\n:::\n\n\n\n# 2i2C Showcase at UC Merced\n\nThe following is a quick presentation for my share of the `JupyterHub` pilot showcase at UC Merced.  We met with the `2i2c` hosting service along with campus partners to explore the capabilities of the software hub.\n\n## Login\n\nAt UC Merced, our `2i2c` server is located at \n\n* [https://ucmerced.2i2c.cloud](https://ucmerced.2i2c.cloud)\n\nEach user sees a `shared` and a `shared-readwrite` folder\n\n![shared and shared-readwrite](upon_login.png)\n\n## File Structure\n\nFor this demonstration, I have made the following directories in the root directory.\n\n* `ExampleCourse_instructor`\n* `ExampleCourse_student`\n\nalong with an `ExampleCourse` inside the `shared-readwrite` directory.\n\n![file_structure](file_structure.png)\n\n\n## Making an Assignment\n\nThis semester, I taught classes with the `R` programming language, and here I will continue to use `R`.  I start my work inside of the `ExampleCourse-instructor` directory.  We will create an assignment inside of a Jupyter notebook, but with an R kernel.  In other words, click on the \"R\" button under \"Notebook\"\n\nThis script has been named `HW1.ipynb`.\n\nThe `2i2c` server comes with the `Otter Grader` tools built by data science faculty at UC Berkeley.  Instructors can highly customize the functionality of these files with the initialization cell (a raw code block).\n\n![initialization](initialization_cell.png)\n\nMy colleagues and I have discussed ways to ease beginning students into the skills of installing code packages.  For the sake of visual brevity, here I will assume that the code packages have been installed already.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code packages\nlibrary(\"palmerpenguins\")\nlibrary(\"tidyverse\")\n\n\nstr(penguins)\n```\n:::\n\n\n\n### Prompts\n\nInstructions for the student can be made with normal typing augmented by markdown as this notebook environment is built for *literate programming*.\n\n![instructions are typed in markdown](instructions_markdown.png)\n\n::: {.cell}\n\n```{.r .cell-code}\n# HW1\n\nIn this assignment, we will build a custom function to compute sample statistics.  Pay attention to the usage of the curly braces `{{...}}`, and we will use the functions on the `palmerpenguins` data set\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1. Write a custom function called `summary_stats` that takes 3 inputs\n\n    * data_frame\n    * grouping_variable\n    * numerical_variable\n\nand outputs the `summarize` command on the following sample statistics: minimum, mean, median, standard deviation, and maximum.  Please follow the given stencil.\n```\n:::\n\n\n### Writing a Problem\n\nInside of a code cell, an instructor can type in the intended answer between `# BEGIN SOLUTION` and `# END SOLUTION` comments.  From there, what the student will see falls between the `# BEGIN PROMPT` and `# END PROMPT` comments.\n\n![an example coding task (from the instructors point of view)](problem1.png)\n\n::: {.cell}\n\n```{.r .cell-code}\n1. Write a custom function called `summary_stats` that takes 3 inputs\n\n    * data_frame\n    * grouping_variable\n    * numerical_variable\n\nand outputs the `summarize` command on the following sample statistics: minimum, mean, median, standard deviation, and maximum.  Please follow the given stencil.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# BEGIN SOLUTION NO PROMPT\nsummary_stats <- function(data_frame, grouping_variable, numerical_variable){\n  data_frame |>\n    filter(!is.na({{grouping_variable}})) |>\n    group_by({{grouping_variable}}) |>\n    summarize(min = min({{numerical_variable}}, na.rm = TRUE),\n            xbar = mean({{numerical_variable}}, na.rm = TRUE),\n            med = median({{numerical_variable}}, na.rm = TRUE),\n            s = sd({{numerical_variable}}, na.rm = TRUE),\n            max = max({{numerical_variable}}, na.rm = TRUE))\n}\n# END SOLUTION\n. = \" # BEGIN PROMPT\nsummary_stats <- function(data_frame, grouping_variable, numerical_variable){\n  data_frame |>\n    filter(!is.na({{grouping_variable}})) |>\n    group_by({{grouping_variable}}) |>\n    summarize(min = min({{numerical_variable}}, na.rm = TRUE),\n            xbar = _____,\n            med = _____,\n            s = _____,\n            max = _____)\n}\n\" # END PROMPT\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n2. Use your `summary_stats` function with the `penguins` data frame, grouped by the `species` categorical variable, on the `bill_length_mm` numerical variable.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# BEGIN SOLUTION NO PROMPT\nsummary_stats(penguins, species, bill_length_mm)\n# END SOLUTION\n. = \" # BEGIN PROMPT\nsummary_stats(penguins, _____, _____)\n\" # END PROMPT\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n3. Use your `summary_stats` function with the `penguins` data frame, grouped by the `island` categorical variable, on the `body_mass_g` numerical variable.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# BEGIN SOLUTION NO PROMPT\nsummary_stats(penguins, island, body_mass_g)\n# END SOLUTION\n. = \" # BEGIN PROMPT\n\n\" # END PROMPT\n```\n:::\n\n\n\n### Test That\n\nAdvanced `R` programmers, especially those that make code packages, use the `testthat` package to create unit tests to verify that functions are working as intended.  The `Otter Grader` framework continues this idea for making assignments in `R`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you want to check your code right now, uncomment the following line of code and run it\n# testthat::expect_equal(summary_stats(penguins, island, body_mass_g)$s[1], 782.8557, tol = 0.01)\n```\n:::\n\n\n\n## Assigning the Assignment\n\nNow we will show the power of `Otter Assign`!  Inside JupyterHub, open a terminal connection\n\n* File --> New --> Terminal\n\nUse the `cd` Unix command to navigate to the instructor files.\n\n```\ncd ExampleCourse_instructor/\n```\n\nSince our assignment is called `HW1.ipynb`, we will `assign` that notebook into the `shared-readwrite` directory.  Tip: it is also a good idea to create a new directory for each homework assignment (to later manage solution files and student submissions).\n\n```\notter assign HW1.ipynb ../shared-readwrite/ExampleCourse/HW1\n```\n\n![Otter Assign](otter_assign.png)\n\nVerify that the `HW1` directory was created within `shared-readwrite/ExampleCourse`.\n\n## Student View\n\nWe also find our `HW1` directory inside the `shared` directory.  The `shared` directory is in a read-only state, so students will not be able to edit and save their work there.\n\nThe easiest route is for a student to download the `HW1.ipynb` file and then upload it into their `ExampleCourse_student` directory.  Advanced users can use Unix commands for this copy.\n\n```\ncp shared/ExampleCourse/HW1/student/HW1.ipynb ExampleCourse_student\n```\n\nNotice how the student receives only the partial prompts and is ready for some homework!\n\n![student view](student_view.png)\n\n# LearnR\n\nIf I have time, I can demonstrate the `LearnR` apps for this audience.  In short, the `LearnR` apps also have autograding for instructors and guidance for students.  (The complexity of the apps is beyond the scope and time of this presentation.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlearnr::run_tutorial(\"Math32Sp2023_instructor/Math32LearnR5.rmd\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}