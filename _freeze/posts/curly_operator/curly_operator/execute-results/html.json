{
  "hash": "2f9e3e750efa31dde3eeac071397f65c",
  "result": {
    "markdown": "---\ntitle: \"curly operator\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-01-15\"\nformat: html\n---\n\n\nThe \"curly operator\" was added in `rlang` a few years ago, and I have yet to really use it much.  It came in handy during a data analyst consulting gig I had during the summer of 2021, and I should use it more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"palmerpenguins\")\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.1 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\nFor instance, can I make a helper function to reduce typing out the same few lines of code that I use often?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_stats <- function(data_frame, grouping_variable, numerical_variable){\n  data_frame |>\n    filter(!is.na({{grouping_variable}})) |>\n    group_by({{grouping_variable}}) |>\n    summarize(min = min({{numerical_variable}}, na.rm = TRUE),\n            xbar = mean({{numerical_variable}}, na.rm = TRUE),\n            med = median({{numerical_variable}}, na.rm = TRUE),\n            s = sd({{numerical_variable}}, na.rm = TRUE),\n            max = max({{numerical_variable}}, na.rm = TRUE))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_stats(penguins, species, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  species     min  xbar   med     s   max\n  <fct>     <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Adelie     32.1  38.8  38.8  2.66  46  \n2 Chinstrap  40.9  48.8  49.6  3.34  58  \n3 Gentoo     40.9  47.5  47.3  3.08  59.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_stats(penguins, island, body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  island      min  xbar   med     s   max\n  <fct>     <int> <dbl> <dbl> <dbl> <int>\n1 Biscoe     2850 4716. 4775   783.  6300\n2 Dream      2700 3713. 3688.  417.  4800\n3 Torgersen  2900 3706. 3700   445.  4700\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}